//#Project3:-Make a program in c++ to solve sudoku problem
#include <iostream>
using namespace std;
#define N 9 //making size of sudoku grid

//function to print the sudoko grid
void printGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            cout << grid[row][col] << " ";
        }
        cout << endl;
    }
}
//function to check if it is safe to place a number in a cell
bool isSafe(int grid[N][N], int row, int col, int num) {
    //check if the number is not present in current row
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num) {
            return false;
        }
    }
    //check if the number is not present in current column
    for (int x = 0; x < N; x++) {
        if (grid[x][col] == num) {
            return false;
        }
    }
    //check if the number is not present in the 3x3 subgrid
    int startRow = row - row % 3, startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }
    return true;
}
//function to find an empty cell in the grid
bool findEmptyCell(int grid[N][N], int& row, int& col) {
    for (row = 0; row < N; row++) {
        for (col = 0; col < N; col++) {
            if (grid[row][col] == 0) {
                return true;
            }
        }
    }
    return false;
}
//backtracking finction to solve the rest of the puzzle
bool solveSudoku(int grid[N][N]) {
    int row, col;
//if no empty cell is left, the puzzle is solved
    if (!findEmptyCell(grid, row, col)) {
        return true;
    }
//try number 1 through 9 in the empty cell
    for (int num = 1; num <= 9; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;  

            //recursively attempt to solve the rest of the puzzle
            if (solveSudoku(grid)) {
                return true;
            }

            grid[row][col] = 0;  //Undo the assignment
        }
    }
    return false;  
}

int main() {
    //Here it is an example of sudoku puzzle
    //here 0 represent as empty cells
    int grid[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (solveSudoku(grid)) {
        cout << "Solved Sudoku grid:" << endl;
        printGrid(grid);
    } else {
        cout << "No solution exists." << endl;
    }

    return 0;
}
//now let check the output
